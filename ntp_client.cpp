
// This code creates an NTP client that adjusts its time with the NTP server
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/time.h>

#define NTP_PORT 123
#define NTP_SERVER "pool.ntp.org"

#define NTP_PACKET_SIZE 48

typedef struct {
    uint8_t li_vn_mode;
    uint8_t stratum;
    uint8_t poll;
    uint8_t precision;
    uint32_t root_delay;
    uint32_t root_dispersion;
    uint32_t ref_identifier;
    uint64_t ref_timestamp;
    uint64_t orig_timestamp;
    uint64_t recv_timestamp;
    uint64_t transmit_timestamp;
} ntp_packet;

void create_ntp_request_packet(ntp_packet *packet) {
    memset(packet, 0, sizeof(ntp_packet));
    packet->li_vn_mode = 0b00100011; // NTP version 4, client mode
}

void send_ntp_request(int sockfd, struct sockaddr_in *server_addr, ntp_packet *packet) {
    sendto(sockfd, packet, sizeof(ntp_packet), 0, (struct sockaddr *)server_addr, sizeof(struct sockaddr));
}

void receive_ntp_response(int sockfd, ntp_packet *packet) {
    recv(sockfd, packet, sizeof(ntp_packet), 0);
}

void adjust_time(ntp_packet *packet) {
    // Extract the transmit timestamp from the NTP response packet
    uint64_t transmit_time = be64toh(packet->transmit_timestamp);

    // Convert NTP timestamp to UNIX timestamp (seconds since 1900 to seconds since 1970)
    time_t ntp_to_unix_offset = 2208988800UL;
    time_t unix_time = transmit_time - ntp_to_unix_offset;

    // Set the system time using settimeofday or a similar function
    struct timeval tv;
    tv.tv_sec = unix_time;
    tv.tv_usec = 0;
    settimeofday(&tv, NULL);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    ntp_packet request_packet, response_packet;

    // Create socket
    sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (sockfd == -1) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Initialize server address struct
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(NTP_PORT);
    inet_pton(AF_INET, NTP_SERVER, &(server_addr.sin_addr));

    // Create NTP request packet
    create_ntp_request_packet(&request_packet);

    // Send NTP request
    send_ntp_request(sockfd, &server_addr, &request_packet);

    // Receive NTP response
    receive_ntp_response(sockfd, &response_packet);

    // Adjust system time based on NTP response
    adjust_time(&response_packet);

    // Close the socket
    close(sockfd);

    return 0;
}
