/*
This code creates an NTP server on RPi3
change pool in /etc/ntp.conf
pool 0.debian.pool.ntp.org iburst
pool 1.debian.pool.ntp.org iburst
pool 2.debian.pool.ntp.org iburst
pool 3.debian.pool.ntp.org iburst

sudo service ntp restart

*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <time.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/ip.h>

#define NTP_PORT 123
#define NTP_PACKET_SIZE 48
#define RPi_IP  "192.168.1.100"

void error(const char *msg) {
    perror(msg);
    exit(EXIT_FAILURE);
}

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    unsigned char ntp_packet[NTP_PACKET_SIZE];
    time_t ntp_time;

    // Create socket
    sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    if (sockfd == -1) {
        error("Error creating socket");
    }

    // Initialize server address struct
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(NTP_PORT);

    // Set the IP address of the NTP server (your Raspberry Pi's IP address)
    if (inet_pton(AF_INET, RPi_IP, &(server_addr.sin_addr)) <= 0) {
        error("Error setting NTP server address");
    }

    // Initialize NTP packet
    memset(ntp_packet, 0, NTP_PACKET_SIZE);
    ntp_packet[0] = 0x1B; // NTP header, see NTP protocol for details

    // Send request to NTP server
    if (sendto(sockfd, ntp_packet, NTP_PACKET_SIZE, 0, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        error("Error sending NTP request");
    }

    // Receive response from NTP server
    if (recv(sockfd, ntp_packet, NTP_PACKET_SIZE, 0) == -1) {
        error("Error receiving NTP response");
    }

    // Extract NTP time from the response packet (bytes 40-43)
    ntp_time = (time_t)ntohl(*(uint32_t *)(ntp_packet + 40));

    // Print the NTP time
    printf("NTP time: %s", ctime(&ntp_time));

    // Close the socket
    close(sockfd);

    return 0;
}
